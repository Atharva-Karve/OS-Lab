//Priority algo
#include <iostream>
#include <climits>
using namespace std;

struct process
{
    int at,bt,priority,p_id,rt,wt,tat,ct;
};

int main() 
{
  int n,i;
  cout << "Enter Number of Processes" << endl;
  cin >> n;
  process p[10];
  for (i=0;i<=n-1;i++)
  {
    p[i].p_id = i;
    cout << "\nEnter Arrival Time of Process " << i << endl; 
    cin >> p[i].at;
    cout << "Enter Burst Time of Process " << i << endl;
    cin >> p[i].bt;
    cout << "Enter Priority of Process " << i << endl;
    cin >> p[i].priority;
  }

  int j;      //burst sort algo to sort by AT, swap function described at end of program 
  for (i=0;i<=n-1;i++)
  {
    for (j=0;j<n-1;j++)
    {
      if (p[j].at > p[j+1].at)
      {
        swap(p[j].at,p[j+1].at);
        swap(p[j].bt,p[j+1].bt);
        swap(p[j].priority,p[j+1].priority);
        swap(p[j].p_id,p[j+1].p_id);
      }
    }
  }

  for (i=0;i<=n-1;i++)
    p[i].rt = p[i].bt;

  int complete = 0, timer = 0;
  int shortest;
  bool check;

  while (complete != n)
  {
    check = false;
    for(i=0; i<n; i++){
      if(p[i].rt > 0){
        shortest = i;
        break;}
    }

        for (int j = 0; j < n; j++) {
            if (p[j].at <= timer && p[j].rt > 0) {
                //checks process priority, lower the number higher the priority.
                if(p[j].priority < p[shortest].priority){
                    shortest = j;
                    check = true;}
                else if(p[j].priority == p[shortest].priority){
                    shortest = (p[j].at < p[shortest].at) ? j:shortest;
                    check = true;}
            }
        }

 
     if (check == false){
            timer++;
            continue;
        }
 
        // Reduce remaining time by one
     p[shortest].rt--;

        // If a process gets completely
        // executed
     if (p[shortest].rt == 0)
     {
          // Increment complete
        complete++;

        // Calculate waiting time
        p[shortest].wt = (timer + 1) - p[shortest].bt - p[shortest].at;

        if (p[shortest].wt < 0)
            p[shortest].wt = 0;
       }
        // Increment time
     timer++;
  }

    for(i=0;i<=n-1;i++)
    {
        p[i].tat = p[i].wt + p[i].bt;
    }

    for(i=0;i<=n-1;i++)
       p[i].ct = p[i].tat + p[i].at;

    cout << "\nFinal Scheduling Table (using Preemptive Priority algo) is:-\n";
    cout << "P\tAT\tBT\tCT\tTAT\tWT" << endl;
    for (i=0;i<=n-1;i++)
        cout << p[i].p_id << "\t" << p[i].at << "\t" << p[i].bt << "\t" << p[i].ct << "\t" << p[i].tat << "\t" << p[i].wt << endl; 

}

void swap(int *xp, int *yp) 
{
    int temp = *xp; 
    *xp = *yp; 
    *yp = temp; 
}
