//SJF algo
#include <iostream>
using namespace std;
int main() 
{
  int n,i;
  int at[10],bt[10]; 
  int wq[10];  //waiting queue array 
  cout << "Enter Number of Processes" << endl;
  cin >> n;
  for(i=0;i<=n-1;i++)
  {
    wq[i] = i;
  }
  for (i=0;i<=n-1;i++)
  {
    cout << "\nEnter Arrival Time of Process " << i << endl; 
    cin >> at[i];
    cout << "Enter Burst Time of Process " << i << endl;
    cin >> bt[i];
  }


  int j;      //burst sort algo, swap function described at end of program 
  for (i=0;i<=n-1;i++)
  {
    for (j=0;j<n-1;j++)
    {
      if (at[j] > at[j+1])
      {
        swap(at[j],at[j+1]);
        swap(bt[j],bt[j+1]);
        swap(wq[j],wq[j+1]);
      }
    }
  }
  int timer = at[0] + bt[0];
  int swap_no = 1;
  int selected, next;

  while(swap_no != n-1) {
    selected = swap_no;
    next = (at[selected] <= timer) ? 1:0;

    for(int i=swap_no+1; i<n; i++) {
      if(at[i] <= timer) {
        if (!next) {
          selected = i;
          next = 1; }

        else {
           if(bt[i] < bt[selected]) 
             selected = i;
           
           else if (bt[i] == bt[selected])
             selected = (at[i] < at[selected]) ? i:selected;
        }
     }
    }
    
  
    if(next)
    {
      timer += bt[selected];

      swap(at[selected], at[swap_no]);
      swap(bt[selected], bt[swap_no]);
      swap(wq[selected], wq[swap_no]);

      swap_no++;
    }
    else
      timer++;
  }

  
  int ct[10],tat[10],wt[10];
  ct[0] = at[0] + bt[0];
  for(i=1;i<=n-1;i++)
  {
    ct[i]= ct[i-1] + bt[i];
  }
  for(i=0;i<=n-1;i++)
  {
    tat[i] = ct[i] - at[i];
    wt[i] = tat[i] - bt[i];
  }
  
  cout << "\nFinal Scheduling Table (using SJF algo) is:-\n";
  cout << "P\tAT\tBT\tCT\tTAT\tWT" << endl;
  for (i=0;i<=n-1;i++)
  {
    cout << wq[i] << "\t" << at[i] << "\t" << bt[i] << "\t" << ct[i] << "\t" << tat[i] << "\t" << wt[i] << endl; 
  }

}

void swap(int *xp, int *yp) 
  { 
    int temp = *xp; 
    *xp = *yp; 
    *yp = temp; 
  } 
