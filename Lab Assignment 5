// PRODUCER CONSUMER PROBLEM
#include <iostream>
using namespace std;
const int buffer_size = 10;
int buffer[10], temp[10], p;
char c;
int s = 1, n = 0, e = buffer_size ;   //semaphores: s-binary mutex lock ; n - no.of filled cells ; e - empty cells (e,n counting)

void producer()
{
        if (e == 0)
          cout << "Buffer Overflow" << endl;
        else
        {
            e = e - 1;   //checks for overflow
        if (s==0)
          cout << "Mutex Semaphore locked, production not possible!\n" ;
        else
            s--;   //lock
        cout << "\nEnter value to produce:\n";
        cin >> buffer[n];
        cout << "Produced Array:\n" ;
        for(int i=0;i<=n;i++)
            cout << buffer[i] << endl;
        s++;  //unlock
        n++;  //increments number of filled cells in buffer
            }
    
}

void consumer()
{
        if (n == 0)
          cout << "Buffer Underflow" << endl;
        else
        {
            n--;  
          if (s==0)
            cout << "Mutex Semaphore locked, consumption not possible!\n" ;
          else
            s--; //lock
        cout << "Value consumed is: " << buffer[n] << endl;
        s++;  //unlock
        e++; //increments number of filled cells in buffer
            }
    
}

int main()
{
    char choice;
    int j;
    for(j=0;j<5;j++)
    {
    cout << "\nEnter P to Produce ; C to Consume ; T to Test Mutex\n";
    cin >> choice ;
    switch (choice)
    {
        case 'P': producer();
                break;
        case 'C': consumer();
                break;
        case 'T': if (e == 0)
          cout << "Buffer Overflow" << endl;
        else
        {
            e = e - 1;   //checks for overflow
        if (s==0)
          cout << "Mutex Semaphore locked, production not possible!\n" ;
        else
            s--;   //lock
        cout << "\nEnter value to produce:\n";
        cin >> buffer[n];
        cout << "Try Consumption: ";
        cin >> c;
        if (s==0 && c == 'C')
            cout << "Mutex Semaphore locked, consumption not possible!\n" ;
        s++;  //unlock
        n++;  //increments number of filled cells in buffer
            }
                  break;
    }
     }
        
}
